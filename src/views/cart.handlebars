<style>
    @layer utilities {

        input[type="number"]::-webkit-inner-spin-button,
        input[type="number"]::-webkit-outer-spin-button {
            -webkit-appearance: none;
            margin: 0;
        }
    }
</style>

<div class="min-h-screen mx-auto max-w-2xl px-4 py-4 sm:px-6 lg:max-w-7xl lg:px-8 bg-gray-100">
    <div class="p-2 text-center">
        <h1 class="m-4 text-2xl font-bold uppercase">Mi carrito</h1>
        <h2 class="font-bold">ID</h2>
        <h3 id="id_carrito" class="underline text-sm">{{cartId}}</h3>
    </div>
    <div class="mx-auto max-w-5xl justify-center px-6 md:flex md:space-x-6 xl:px-0">
        <div class="rounded-lg md:w-2/3">
            {{#each cartProducts}}
            <div
                class="mb-6 rounded-lg bg-white p-6 shadow-md md:flex md:flex-col md:justify-between lg:justify-start lg:flex-row">
                <img src="{{this.product.thumbnail}}" alt="{{this.product.title}}"
                    class=" object-cover w-14 lg:w-16 rounded-lg sm:w-16" />
                <div class="sm:ml-4 sm:flex sm:w-full sm:justify-between">
                    <div class="mt-5 sm:mt-0">
                        <h2 class="text-lg font-bold text-gray-900">{{this.product.title}}</h2>
                        <p class="mt-1 text-xs text-black">{{this.product._id}}</p>
                        <p class="mt-1 text-sm text-black">Stock actual: {{this.product.stock}}</p>
                    </div>
                    <div
                        class="mt-4 flex justify-between sm:space-y-6 sm:mt-0 sm:block sm:space-x-6 md:space-y-6 md:mt-0 md:block md:space-x-6">
                        <div class="flex flex-col items-center border-gray-100">
                            <p class="mt-1 text-sm font-bold">Cantidad </p>
                            <p class="text-xs text-right">{{this.quantity}}</p>

                        </div>
                        <div class="flex items-center space-x-4">
                            <button
                                class="text-black bg-blue-500 px-2 font-small text-blue-50 hover:bg-blue-600 rounded-xl"
                                onclick="addProductQuantity('{{this.product._id}}')">+1</button>
                            <p class="text-sm">$ {{this.product.price}}</p>
                            <button onclick="deleteFromCart('{{this.product._id}}')"><svg
                                    xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24"
                                    stroke-width="1.5" stroke="currentColor"
                                    class="h-5 w-5 cursor-pointer duration-150 hover:text-red-500">
                                    <path stroke-linecap="round" stroke-linejoin="round" d="M6 18L18 6M6 6l12 12" />
                                </svg>
                            </button>
                        </div>
                    </div>
                </div>
            </div>
            {{/each}}
        </div>
        <!-- Sub total -->
        <div class="mt-6 h-full rounded-lg border bg-white p-6 shadow-md md:mt-0 md:w-1/3">
            <div class="mb-2 flex justify-between">
                <p class="text-gray-700">Subtotal</p>
                <p class="text-gray-700">${{subTotal}}</p>
            </div>
            <div class="flex justify-between">
                <p class="text-gray-700">Envío</p>
                <p class="text-gray-700">${{ship}}</p>
            </div>
            <hr class="my-4" />
            <div class="flex justify-between">
                <p class="text-lg font-bold">Total</p>
                <div class="">
                    <p class="mb-1 text-lg font-bold">${{amount}}</p>
                    <p class="text-sm text-gray-700">IVA inc.</p>
                </div>
            </div>
            <button class="mt-6 w-full rounded-md bg-red-500 py-1.5 font-medium text-red-50 hover:bg-red-600"
                id="pagar-btn">Pagar con Stripe</button>
        </div>
    </div>
</div>


<script src="https://js.stripe.com/v3/"></script>
<script>
    function swalAdded() {
        Swal.fire({
            title: `Producto agregado!!`,
            text: "Se agregó el producto correctamente",
            icon: "success"
        }).then((result) => {
            if (result.isConfirmed) {
                // Si se hace clic en "Aceptar", actualiza la página
                location.reload();
            }
        });
    }
    function swalError(error) {
        Swal.fire({
            title: `Error`,
            text: error,
            icon: "warning"
        })
    }
    function swalDelete() {
        Swal.fire({
            title: `Producto borrado !`,
            text: 'Se borró el producto del carrito con éxito.',
            icon: "success"
        }).then((result) => {
            if (result.isConfirmed) {
                // Si se hace clic en "Aceptar", actualiza la página
                location.reload();
            }
        });
    }
    const requestOptions = {
        method: 'delete',
        headers: { 'Content-Type': 'application/json' }
    }
    const cartID = document.getElementById('id_carrito').innerText
    // Funcion para borrar un producto del carrito
    function deleteFromCart(pid) {

        fetch(`/api/carts/${cartID}/product/${pid}`, requestOptions)
            .then(result => result.json())
            .then(result => {
                if (result.response.status === 'error') return swalError(result.response.error)
                swalDelete()
            })
            .catch(error => swalError(error))
    }
    // Funcion para sumar más cantidades de un producto en el carrito
    function addProductQuantity(pid) {
        if (!cartID) return swalPermission()
        fetch(`/api/carts/${cartID}/product/${pid}`, {
            method: 'post'
        })
            .then(result => result.json())
            .then(result => {
                console.log(result)
                if (result.status === 'error') return swalError(result.error)
                swalAdded()
            })
            .catch(error => swalError(error))
    }
    // Configurar la clave pública de Stripe
    const stripe = Stripe('{{ stripePublishableKey }}');
    document.getElementById('pagar-btn').addEventListener('click', async () => {
        // Obtener la sesión de pago desde el servidor
        const response = await fetch('/api/payments/create-checkout-session', {
            method: 'post',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                cid: cartID
            })
        })
        const data = await response.json();
        console.log(data)
        if (data.status === 'error') return swalError(data.error)

        // Redireccionar al flujo de pago de Stripe
        const result = await stripe.redirectToCheckout({
            sessionId: data.sessionId,
        });
        if (result.error) {
            console.error(result.error.message);
        }

    })

</script>